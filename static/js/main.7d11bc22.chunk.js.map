{"version":3,"sources":["components/contactList/ContactList.module.css","components/contact/Contact.module.css","components/loader/Loader.module.css","components/Phonebook.module.css","redux/contacts/contuctsActions.js","redux/contacts/contactsOperation.js","redux/contacts/contactsSelectors.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contact/Contact.js","components/contactList/ContactList.js","components/loader/Loader.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","axios","defaults","baseURL","getLoading","state","contacts","loading","getContacts","items","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","number","handleNameChange","e","target","value","setState","handleNumberChange","handleSubmit","preventDefault","props","onAddContact","this","fetchContacts","onSubmit","className","styles","group","autoComplete","input","type","onChange","required","bar","label","buttonSubmit","Component","connect","dispatch","a","actions","post","data","addContact","get","onChangeFilter","evt","onDeleteNumber","id","delete","deleteContact","buttonDelete","onClick","ContactList","listContacts","map","item","Loader","color","height","width","timeout","Spinner","App","style","phoneBook","itemsReducer","createReducer","_","payload","index","findIndex","Number","slice","filterReducer","action","loadingReducer","contactReucers","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d11bc22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__2G3A0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"Contact_buttonDelete__1lOCX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Loader_Spinner__16v7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBook\":\"Phonebook_phoneBook__Cjdgh\",\"group\":\"Phonebook_group__p6Evy\",\"input\":\"Phonebook_input__g_5fO\",\"label\":\"Phonebook_label__2OL9P\",\"bar\":\"Phonebook_bar__7WmQ_\",\"buttonSubmit\":\"Phonebook_buttonSubmit__1mHo2\"};","import { createAction, nanoid } from '@reduxjs/toolkit';\n\nexport const addContactRequest = createAction('contacts/add-Contacts-Request');\nexport const addContactSuccess = createAction('contacts/add-Contacts-Success');\nexport const addContactError = createAction('contacts/add-Contacts-Error');\n\nexport const deleteContactRequest = createAction('contacts/delete-Contacts-Request');\nexport const deleteContactSuccess = createAction('contacts/delete-Contacts-Success');\nexport const deleteContactError = createAction('contacts/delete-Contacts-Error');\n\nexport const fetchContactsRequest = createAction('contacts/fetch-Contacts-Request');\nexport const fetchContactsSuccess = createAction('contacts/fetch-Contacts-Success');\nexport const fetchContactsError = createAction('contacts/fetch-Contacts-Error');\n\nexport const changeFilter = createAction('contacts/filter');\n","import axios from 'axios';\nimport * as actions from './contuctsActions';\n\naxios.defaults.baseURL = '  http://localhost:4040';\n\nexport const addContact = ({ name, number }) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(actions.addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(actions.addContactSuccess(data));\n  } catch (errors) {\n    dispatch(actions.addContactError(errors));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(actions.deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(actions.deleteContactSuccess(id));\n  } catch (errors) {\n    dispatch(actions.deleteContactError(errors));\n  }\n};\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(actions.fetchContactsSuccess(data));\n  } catch (errors) {\n    dispatch(actions.fetchContactsError(errors));\n  }\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector([getContacts, getFilter], (items, filter) => {\n  return items.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n});\n\n// export const getFilteredContacts = state =>\n//   getFilter(state)\n//     ? state.contacts.items.filter(contact =>\n//         contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n//       )\n//     : getContacts(state);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { addContact, fetchContacts } from '../../redux/contacts/contactsOperation';\nimport { getContacts } from '../../redux/contacts/contactsSelectors';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  handleNameChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleNumberChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (!this.state.name || !this.state.number) return;\n\n    this.props.onAddContact({ ...this.state });\n\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className={styles.group}>\n          <input\n            autoComplete=\"off\"\n            className={styles.input}\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={this.handleNameChange}\n            required\n          />\n          <span className={styles.bar}></span>\n          <label className={styles.label}>Name</label>\n        </div>\n        <div className={styles.group}>\n          <input\n            autoComplete=\"off\"\n            className={styles.input}\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            onChange={this.handleNumberChange}\n            required\n          />\n          <span className={styles.bar}></span>\n          <label className={styles.label}>Number:</label>\n        </div>\n        <hr />\n        <button className={styles.buttonSubmit} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return {\n    items: getContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(addContact(contact)),\n  fetchContacts: () => dispatch(fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport styles from '../Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contuctsActions';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  const onHadleFilter = evt => {\n    onChangeFilter(evt.target.value);\n  };\n\n  return (\n    <div className={styles.group}>\n      <input\n        autoComplete=\"off\"\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        name=\"name\"\n        onChange={onHadleFilter}\n        required\n      />\n      <span className={styles.bar}></span>\n      <label className={styles.label}>Find contacts by name</label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    filter: getFilter(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: filter => dispatch(changeFilter(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport styles from './Contact.module.css';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsOperation';\n\nconst Contact = ({ contact, onDeleteNumber }) => {\n  const deleteItem = () => {\n    onDeleteNumber(contact.id);\n  };\n\n  return (\n    <>\n      <span>\n        {contact.name}: {contact.number}\n      </span>\n      <button className={styles.buttonDelete} type=\"button\" onClick={deleteItem}>\n        DELETE\n      </button>\n    </>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteNumber: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Contact);\n","import React, { Component } from 'react';\nimport Contact from '../contact/Contact';\nimport { connect } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/contactsSelectors';\nimport styles from './ContactList.module.css';\n\nclass ContactList extends Component {\n  render() {\n    return (\n      <ul className={styles.listContacts}>\n        {this.props.contacts.map(item => (\n          <li className={styles.contact} key={item.id}>\n            <Contact contact={item} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getFilteredContacts(state),\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n\n//  ============= без reduxjs/toolkit =================\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import Contact from '../contact/Contact';\n// import { connect } from 'react-redux';\n\n// class ContactList extends Component {\n//   render() {\n//     return (\n//       <ul>\n//         {this.props.contacts.map(item => (\n//           <li key={item.id}>\n//             <Contact contact={item} />\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n\n// ContactList.propTypes = {\n//   items: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }).isRequired,\n//   ).isRequired,\n//   onDeleteNumber: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.contacts.filter\n//       ? state.contacts.items.filter(contact =>\n//           contact.name\n//             .toLowerCase()\n//             .includes(state.contacts.filter.toLowerCase()),\n//         )\n//       : state.contacts.items,\n//   };\n// };\n\n// export default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport Spinner from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport styles from './Loader.module.css';\n\nexport default class Loader extends Component {\n  render() {\n    return (\n      <Spinner\n        type=\"ThreeDots\"\n        color=\"#00BFFF\"\n        height={50}\n        width={50}\n        timeout={2000}\n        className={styles.Spinner}\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ContactForm from './contactForm/ContactForm';\nimport Filter from './filter/Filter';\nimport ContactList from './contactList/ContactList';\nimport style from './Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../redux/contacts/contuctsActions';\nimport Loader from './loader/Loader';\nimport { getLoading, getContacts } from '../redux/contacts/contactsSelectors';\n\nclass App extends Component {\n  render() {\n    const { items } = this.props;\n    return (\n      <div className={style.phoneBook}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        {this.props.loading && <Loader></Loader>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    items: getContacts(state),\n    loading: getLoading(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: filter => dispatch(changeFilter(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport {\n  addContactSuccess,\n  addContactRequest,\n  addContactError,\n  deleteContactSuccess,\n  deleteContactRequest,\n  deleteContactError,\n  changeFilter,\n  fetchContactsSuccess,\n  fetchContactsRequest,\n  fetchContactsError,\n} from './contuctsActions';\n\nconst itemsReducer = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) => {\n    const index = state.findIndex(({ id }) => id === Number(payload));\n    return [...state.slice(0, index), ...state.slice(index + 1)];\n  },\n});\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n});\n\nconst loadingReducer = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n  [fetchContactsSuccess]: () => true,\n  [fetchContactsRequest]: () => false,\n  [fetchContactsError]: () => false,\n  [changeFilter]: () => true,\n});\n\nconst contactReucers = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  loading: loadingReducer,\n});\n\nexport default contactReucers;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport contactsReducer from './contacts/contactsReducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n//  ============= без reduxjs/toolkit =================\n// import { createStore, combineReducers } from 'redux';\n// import contactsReducer from './contacts/contactsReducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n// );\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './globalize.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store.store}>\n    <PersistGate loading={null} persistor={store.persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}